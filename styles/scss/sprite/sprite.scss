// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$back-name: 'back';
$back-x: 40px;
$back-y: 43px;
$back-offset-x: -40px;
$back-offset-y: -43px;
$back-width: 40px;
$back-height: 22px;
$back-total-width: 141px;
$back-total-height: 99px;
$back-image: 'sprite.png';
$back: (40px, 43px, -40px, -43px, 40px, 22px, 141px, 99px, 'sprite.png', 'back', );
$close-name: 'close';
$close-x: 114px;
$close-y: 70px;
$close-offset-x: -114px;
$close-offset-y: -70px;
$close-width: 14px;
$close-height: 14px;
$close-total-width: 141px;
$close-total-height: 99px;
$close-image: 'sprite.png';
$close: (114px, 70px, -114px, -70px, 14px, 14px, 141px, 99px, 'sprite.png', 'close', );
$contact-name: 'contact';
$contact-x: 114px;
$contact-y: 30px;
$contact-offset-x: -114px;
$contact-offset-y: -30px;
$contact-width: 14px;
$contact-height: 20px;
$contact-total-width: 141px;
$contact-total-height: 99px;
$contact-image: 'sprite.png';
$contact: (114px, 30px, -114px, -30px, 14px, 20px, 141px, 99px, 'sprite.png', 'contact', );
$facebook-name: 'facebook';
$facebook-x: 85px;
$facebook-y: 0px;
$facebook-offset-x: -85px;
$facebook-offset-y: 0px;
$facebook-width: 29px;
$facebook-height: 29px;
$facebook-total-width: 141px;
$facebook-total-height: 99px;
$facebook-image: 'sprite.png';
$facebook: (85px, 0px, -85px, 0px, 29px, 29px, 141px, 99px, 'sprite.png', 'facebook', );
$favicon-name: 'favicon';
$favicon-x: 114px;
$favicon-y: 0px;
$favicon-offset-x: -114px;
$favicon-offset-y: 0px;
$favicon-width: 27px;
$favicon-height: 30px;
$favicon-total-width: 141px;
$favicon-total-height: 99px;
$favicon-image: 'sprite.png';
$favicon: (114px, 0px, -114px, 0px, 27px, 30px, 141px, 99px, 'sprite.png', 'favicon', );
$hamburger-name: 'hamburger';
$hamburger-x: 0px;
$hamburger-y: 43px;
$hamburger-offset-x: 0px;
$hamburger-offset-y: -43px;
$hamburger-width: 40px;
$hamburger-height: 27px;
$hamburger-total-width: 141px;
$hamburger-total-height: 99px;
$hamburger-image: 'sprite.png';
$hamburger: (0px, 43px, 0px, -43px, 40px, 27px, 141px, 99px, 'sprite.png', 'hamburger', );
$linkedin-name: 'linkedin';
$linkedin-x: 85px;
$linkedin-y: 29px;
$linkedin-offset-x: -85px;
$linkedin-offset-y: -29px;
$linkedin-width: 29px;
$linkedin-height: 29px;
$linkedin-total-width: 141px;
$linkedin-total-height: 99px;
$linkedin-image: 'sprite.png';
$linkedin: (85px, 29px, -85px, -29px, 29px, 29px, 141px, 99px, 'sprite.png', 'linkedin', );
$location-name: 'location';
$location-x: 114px;
$location-y: 50px;
$location-offset-x: -114px;
$location-offset-y: -50px;
$location-width: 14px;
$location-height: 20px;
$location-total-width: 141px;
$location-total-height: 99px;
$location-image: 'sprite.png';
$location: (114px, 50px, -114px, -50px, 14px, 20px, 141px, 99px, 'sprite.png', 'location', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 0px;
$logo-offset-x: 0px;
$logo-offset-y: 0px;
$logo-width: 85px;
$logo-height: 43px;
$logo-total-width: 141px;
$logo-total-height: 99px;
$logo-image: 'sprite.png';
$logo: (0px, 0px, 0px, 0px, 85px, 43px, 141px, 99px, 'sprite.png', 'logo', );
$twitter-name: 'twitter';
$twitter-x: 0px;
$twitter-y: 70px;
$twitter-offset-x: 0px;
$twitter-offset-y: -70px;
$twitter-width: 29px;
$twitter-height: 29px;
$twitter-total-width: 141px;
$twitter-total-height: 99px;
$twitter-image: 'sprite.png';
$twitter: (0px, 70px, 0px, -70px, 29px, 29px, 141px, 99px, 'sprite.png', 'twitter', );
$spritesheet-width: 141px;
$spritesheet-height: 99px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($back, $close, $contact, $facebook, $favicon, $hamburger, $linkedin, $location, $logo, $twitter, );
$spritesheet: (141px, 99px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
